import os
import subprocess
from google.genai import types

def run_python_file(working_directory, file_path, args=[]):
    abs_path_work_dir = os.path.abspath(working_directory)
    abs_file_path = os.path.abspath(os.path.join(working_directory, file_path))

    if not abs_file_path.startswith(abs_path_work_dir):
        return f'Error: Cannot execute "{file_path}" as it is outside the permitted working directory'
    
    if not os.path.exists(abs_file_path):
        return f'Error: File "{file_path}" not found.'

    if not file_path.endswith(".py"):
        return f'Error: "{file_path}" is not a Python file.'
    try:
        commands = ["python", abs_file_path]
        if args:
            commands.extend(args)
        result = subprocess.run(
            commands, 
            timeout=30, 
            capture_output=True, 
            check=True, 
            cwd=abs_path_work_dir
            )
        output = []
        if result.stdout:
            output.append(
                f"STDOUT:\n{result.stdout}"
                )
        if result.stderr:
            output.append(
                f"STDERR:\n{result.stderr}"
                )
        if result.returncode != 0:
            output.append(
                f"Process exited with code {result.returncode}"
                )
    except Exception as e:
        return f"Error executing Python file: {e}"
    return "\n".join(output) if output else "No output produced."

schema_run_python_file = types.FunctionDeclaration(
    name="run_python_file",
    description="Allows running of python files",
    parameters=types.Schema(
        type=types.Type.OBJECT,
        properties={
            "file_path": types.Schema(
                type=types.Type.STRING,
                description="Specifies the python file to run",
            ),
            "args": types.Schema(
                type=types.Type.STRING,
                description="Arguments for the python file to execute"
            ),
        },
    ),
)